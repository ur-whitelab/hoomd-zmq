// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace HZMsg
{

using global::System;
using global::FlatBuffers;

public struct Frame : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Frame GetRootAsFrame(ByteBuffer _bb) { return GetRootAsFrame(_bb, new Frame()); }
  public static Frame GetRootAsFrame(ByteBuffer _bb, Frame obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Frame __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int N { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateN(int N) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, N); return true; } else { return false; } }
  public int I { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateI(int i) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, i); return true; } else { return false; } }
  public Scalar4? Positions(int j) { int o = __p.__offset(8); return o != 0 ? (Scalar4?)(new Scalar4()).__assign(__p.__vector(o) + j * 16, __p.bb) : null; }
  public int PositionsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Frame> CreateFrame(FlatBufferBuilder builder,
      int N = 0,
      int i = 0,
      VectorOffset positionsOffset = default(VectorOffset)) {
    builder.StartObject(3);
    Frame.AddPositions(builder, positionsOffset);
    Frame.AddI(builder, i);
    Frame.AddN(builder, N);
    return Frame.EndFrame(builder);
  }

  public static void StartFrame(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddN(FlatBufferBuilder builder, int N) { builder.AddInt(0, N, 0); }
  public static void AddI(FlatBufferBuilder builder, int i) { builder.AddInt(1, i, 0); }
  public static void AddPositions(FlatBufferBuilder builder, VectorOffset positionsOffset) { builder.AddOffset(2, positionsOffset.Value, 0); }
  public static void StartPositionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(16, numElems, 4); }
  public static Offset<Frame> EndFrame(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Frame>(o);
  }
  public static void FinishFrameBuffer(FlatBufferBuilder builder, Offset<Frame> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedFrameBuffer(FlatBufferBuilder builder, Offset<Frame> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
